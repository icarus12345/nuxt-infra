.rt-TextFieldInput,
.rt-TextareaInput {
  all: unset;
  box-sizing: border-box;
  width: 100%;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-size: 14px;
}
.rt-TextFieldRoot {
  display: flex;
  align-items: stretch;
  font-style: normal;
  text-align: start;
  background-color: var(--text-field-background);
  box-shadow: 0 0 0 var(--text-field-border-width) inset var(--text-field-border);
  border-radius: 4px;
  &:hover {
    box-shadow: 0 0 0 var(--text-field-border-width) inset var(--text-field-border-hover);
  }

  @supports selector(:has(*)) {
    &:where(:focus,:has(.rt-TextFieldInput:focus)) {
      box-shadow: 0 0 0 var(--text-field-border-width) inset var(--text-field-border-hover);
      outline: 2px solid var(--text-field-focus-outline);
      /* outline-offset: -1px; */
    }
  }
  @supports not selector(:has(*)) {
    &:where(:focus-within) {
      box-shadow: 0 0 0 var(--text-field-border-width) var(--text-field-border-hover);
      outline: 2px solid var(--text-field-focus-outline);
      /* outline-offset: -1px; */
    }
  }

  &::selection {
    background-color: var(--text-field-selection-color);
  }
  &:disabled, :read-only, 
  &:where(:has(.rt-TextFieldInput:where(:disabled, :read-only))) {
    @apply grayscale pointer-events-none;
  }
}

.rt-TextFieldSlot {
  box-sizing: border-box;
  flex-shrink: 0;
  display: flex;
  align-items: center;
  cursor: text;
  padding-left: var(--space-3);
  padding-right: var(--space-3);

  /* A slot that is not a right-side slot goes on the left */
  &:where(:not([data-side='right'])) {
    order: -1;
    margin-left: calc(var(--text-field-border-width) * -1);
    margin-right: 0;
  }

  &:where([data-side='right']),
  /*
   * A slot followed by a left-side slot that is not a left-side slot itself goes on the right.
   * In simple terms, this makes it so that two slots without an explicit side work automatically.
   */
  :where(&:not([data-side='right'])) ~ &:where(:not([data-side='left'])) {
    order: 0;
    margin-left: 0;
    margin-right: calc(var(--text-field-border-width) * -1);
  }
}


.rt-TextFieldInput {
  padding: 0 12px;
  height: var(--base-input-height);
  &:where(:has(~ .rt-TextFieldSlot:not([data-side='right']))) {
    text-indent: 0;
    padding-left: 0;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  /* Remove border-radius and padding on the right if thereâ€™s a right-side slot */
  /* prettier-ignore */
  &:where(:has(
    ~ .rt-TextFieldSlot[data-side='right'],
    ~ .rt-TextFieldSlot:not([data-side='right']) ~ .rt-TextFieldSlot:not([data-side='left'])
  )) {
    padding-right: 0;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }
}

.rt-TextareaInput {
  resize: none;
  padding: 10px;
}

.rt-TextFieldRoot {
  &:where(.rt-variant-surface) {
    --text-field-selection-color: var(--focus-a5);
    --text-field-focus-color: var(--focus-8);
    --text-field-border-width: 1px;
    --text-field-background: var(--green-a2);
    --text-field-border: var(--green-a6);
    --text-field-border-hover: var(--green-a8);
    --text-field-focus-outline: var(--green-a4);
    --text-field-disabled-background: var(--gray-3);
  }
  &:where(.rt-r-size-1) {
    --base-input-height: theme(space.6);
  }

  &:where(.rt-r-size-2) {
    --base-input-height: theme(space.8);
  }
}